#include<iostream>
#include<new>
#include<stdio.h>
using namespace std;
struct node
{
   int data;
  struct node *next;
};
typedef struct node *head;
class list1
{ 
	node *head;
	node *ptr;
	public:
	void begin_insert()  //function to insert element at the begining
	{
	  struct node *ptr;
	  int item;
	  ptr=(struct node *)malloc(sizeof(struct node *));
	  if(ptr==NULL)//to check if ll is full
	  {
	    cout<<"Overflow\n";
	  }
	  else
	  {
	    cout<<"Enter Value:";
	    cin>>item;//to take value input from user
	    ptr->data = item;
	    ptr->next = head ;
	    head=ptr;
	    cout<<"Node Inserted\n";
	  }
	}

	void last_insert() //function to insert element at the last
	{
	  struct node *ptr,*temp;
	  int item;
	  ptr=(struct node *)malloc(sizeof(struct node *));
	  if(ptr==NULL)//to check if ll is full
	  {
	    cout<<"OverFlow\n";
	  }
	  else
	  {
	    cout<<"Enter Value:";
	    cin>>item;//to take value input from user
	    ptr->data=item;
	    if(head==NULL)
	    {
	      ptr->next=NULL;
	      head=ptr;
	      cout<<"Node Inserted\n";
	    }
	    else
	    {
	      temp=head;
	      while(temp->next!=NULL)
	      {
		temp=temp->next;
	      }
	      temp->next=ptr;
	      ptr->next=NULL;
	      cout<<"Node Inserted\n";
	    }
	  }
	}

	void random_insert()//function to insert element at the desired location
	{
	  struct node *ptr,*temp;
	  int item,loc,i;
	  ptr=(struct node *)malloc(sizeof(struct node *));
	  if(ptr==NULL)//to check if ll is full
	  {
	    cout<<"Overflow";
	  }
	  else
	  {
	    cout<<"Enter Value:";
	    cin>>item;//to take value input from user
	    ptr->data=item;
	    cout<<"\nEnter the loc after which you want to insert\n";
	   cin>>loc;//to take location input from user
	    temp=head;
	    for(i=0;i<loc;i++)
	    {
	      temp=temp->next;
	      if(temp==NULL)
	      {
		cout<<"Cant Insert\n";
		return;
	      }
	    }
	    ptr->next=temp->next;
	    temp->next=ptr;
	   cout<<"Node inserted\n";
	  }
	}

	void begin_delete()//function to delete element at the begining
	{
	  struct node *ptr,*ptr1;
	  if(head==NULL)//to check if ll is empty
	  {
	    cout<<"List is Empty\n";
	  }
	  else
	  {
	    ptr=head;
	    head=ptr->next;
	    free(ptr);
	    cout<<"Node Deleted from beginning\n";
	  }
	}

	void last_delete()//function to delete element at the last
	{
	  struct node *ptr,*ptr1;
	  if(head==NULL)//to check if ll is empty
	  {
	    cout<<"List is Empty\n";
	  }
	  else if(head->next==NULL)
	  {
	    head=NULL;
	    free(head);
	    cout<<"Only Node of the list deleted\n";
	  }
	  else
	  {
	    ptr=head;
	    while(ptr->next!=NULL)
	    {
	      ptr1=ptr;
	      ptr=ptr->next;
	    }
	    ptr1->next=NULL;
	    free(ptr);
	    cout<<"Deleted node from the last\n";
	  }
	}

	void delete_random()//function to delete element at the desired location
	{
	  struct node *ptr,*ptr1;
	  int loc,i;
	  cout<<"Enter the location of the node after which it has to be deleted\n";
	  cin>>loc;//to take location input from user
	  ptr=head;
	  for(i=0;i<loc;i++)
	  {
	    ptr1=ptr;
	    ptr=ptr->next;
	    if(ptr==NULL)//to check if ll is empty
	    {
	    cout<<"Cant Delete\n";
	    return;
	    }
	  }
	  ptr1->next=ptr->next;
	  free(ptr);
	  cout<<"Delete Node %d ",loc+1;
	}

	void display()//function to display elements of the ll
	{
	  if(head==NULL)//to check if ll is empty
	  {
	    cout<<"Linked List is Empty\n";
	    return;
	  }
	  cout<<"LinkedList: ";
	  struct node* ptr = head ;
	  while(ptr!=NULL)// start from first node
	  {
	    printf("%d",ptr->data);
	    ptr = ptr->next;
	  }
	  cout<<"\n";
}
};

int main()//main function
{
  int choice;
  list1 ob;
  while(1)
  {
    cout<<"Operation performed by Linked Lists:\n";
    cout<<"1.Insert at Begin\n2.Insert at Last\n3.Insert at Random\n4.Delete at Begin\n5.Delete at Last\n6.Delete at random\n7.Display\n8.Exit\n";
    cout<<"Enter Your Choice\n";
    cin>>choice;//to take operation input from user
    switch(choice)
    {
      case 1: ob.begin_insert();
      break;
      case 2: ob.last_insert();
      break;
      case 3: ob.random_insert();
      break;
      case 4: ob.begin_delete();
      break;
      case 5: ob.last_delete();
      break;
      case 6: ob.delete_random();
      break;
      case 7: ob.display();
      break;
      case 8: exit(0);
      default: printf("Invalid Choice\n");
    }
  }
}
